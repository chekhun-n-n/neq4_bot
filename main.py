import os
import logging
import io
import re
import json

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

from oauth2client.service_account import ServiceAccountCredentials
import gspread
from PIL import Image
import pytesseract

# ----------------------
# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ----------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ----------------------
# 2. –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ----------------------
# Telegram
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
if not TELEGRAM_TOKEN:
    logger.error("ERROR: TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")
    exit(1)

# Google Sheets ID
GOOGLE_SHEET_ID = os.getenv('GOOGLE_SHEET_ID')
if not GOOGLE_SHEET_ID:
    logger.error("ERROR: GOOGLE_SHEET_ID –Ω–µ –∑–∞–¥–∞–Ω–∞")
    exit(1)

# JSON –∫–ª—é—á (–ª–∏–±–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –ª–∏–±–æ —Ñ–∞–π–ª)
env_json = os.getenv('GOOGLE_SERVICE_JSON')
if env_json:
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    with open('service_account.json', 'w', encoding='utf-8') as f:
        f.write(env_json)
    GOOGLE_JSON_PATH = 'service_account.json'
else:
    # fallback –Ω–∞ —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    GOOGLE_JSON_PATH = os.getenv(
        'GOOGLE_JSON_PATH',
        'sheets-bot-463919-5cf9c9fa0648.json'
    )

# ----------------------
# 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# ----------------------
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# ----------------------
# 4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
# ----------------------
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_name(
    GOOGLE_JSON_PATH, scope
)
gc = gspread.authorize(creds)
sheet = gc.open_by_key(GOOGLE_SHEET_ID).sheet1

# ----------------------
# 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# ----------------------
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äì –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–±–æ—Ç.\n\n"
        "‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç ‚Äì —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –∏ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂.\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /template <–∫–ª—é—á> ‚Äì —è –ø–æ–¥–±–µ—Ä—É –Ω—É–∂–Ω—ã–π —à–∞–±–ª–æ–Ω –∏–∑ Google Sheets.\n"
    )
    await message.reply(text)

@dp.message_handler(content_types=['photo'])
async def handle_photo(message: types.Message):
    # 1) –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    bio = io.BytesIO()
    await bot.download_file(file.file_path, destination=bio)
    bio.seek(0)

    # 2) OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    try:
        img = Image.open(bio)
        text = pytesseract.image_to_string(img, lang='rus').strip()
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        return

    # 3) –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è –∏ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂–∞
    num = re.search(r'[–ó–∑]–∞–¥–∞–Ω–∏[–µ—è][: ]+(\w+)', text)
    km  = re.search(r'(\d+)[\s-]*–∫–º', text)
    job = num.group(1) if num else '–Ω–µ –Ω–∞–π–¥–µ–Ω'
    kmv = km.group(1)  if km  else '–Ω–µ –Ω–∞–π–¥–µ–Ω'

    # 4) –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    resp = (
        f"üìã *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:*\n"
        f"‚Äì –ó–∞–¥–∞–Ω–∏–µ: `{job}`\n"
        f"‚Äì –ö–∏–ª–æ–º–µ—Ç—Ä–∞–∂: `{kmv} –∫–º`\n\n"
        f"üóí –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}"
    )
    await message.reply(resp, parse_mode='Markdown')

@dp.message_handler(commands=['template'])
async def handle_template(message: types.Message):
    key = message.get_args().lower().strip()
    if not key:
        return await message.reply("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á: `/template –æ–ø–ª–∞—Ç–∞`", parse_mode='Markdown')

    rows = sheet.get_all_records()
    matches = [r for r in rows if key in r.get('–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', '').lower()]
    if not matches:
        return await message.reply("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    for row in matches:
        cat = row.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '')
        txt = row.get('–®–∞–±–ª–æ–Ω (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)', '').strip()
        link= row.get('–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ/—Ñ–∞–π–ª', '').strip()
        out = f"üìÑ *{cat}*\n{txt}"
        if link:
            out += f"\nüîó {link}"
        await message.reply(out, parse_mode='Markdown')

# ----------------------
# 6. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ----------------------
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

