import os
import logging
import io
import re
import json

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.utils.markdown import escape_md

from google.oauth2.service_account import Credentials
import gspread
from PIL import Image
import pytesseract

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN  = os.getenv('TELEGRAM_TOKEN')
GOOGLE_SHEET_ID = os.getenv('GOOGLE_SHEET_ID')
if not TELEGRAM_TOKEN or not GOOGLE_SHEET_ID:
    logger.error("üî¥ TELEGRAM_TOKEN –∏ GOOGLE_SHEET_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã!")
    exit(1)

svc_json = os.getenv('GOOGLE_SERVICE_JSON')
if not svc_json:
    logger.error("üî¥ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_SERVICE_JSON –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    exit(1)

info = json.loads(svc_json)
scopes = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]
creds = Credentials.from_service_account_info(info, scopes=scopes)

gc = gspread.authorize(creds)
sheet = gc.open_by_key(GOOGLE_SHEET_ID).sheet1

bot = Bot(token=TELEGRAM_TOKEN)
dp  = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def cmd_start(msg: types.Message):
    await msg.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–±–æ—Ç.\n\n"
        "‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∑–∞–¥–∞–Ω–∏–µ –∏ –∫–º.\n"
        "‚Ä¢ /template <–∫–ª—é—á> ‚Äî –Ω–∞–π–¥—É —à–∞–±–ª–æ–Ω –≤ Google Sheets."
    )

@dp.message_handler(content_types=['photo'])
async def on_photo(msg: types.Message):
    f    = await bot.get_file(msg.photo[-1].file_id)
    bio  = io.BytesIO()
    await bot.download_file(f.file_path, destination=bio)
    bio.seek(0)

    try:
        img  = Image.open(bio)
        text = pytesseract.image_to_string(img, lang='rus').strip()
    except Exception as e:
        return await msg.reply(f"–û—à–∏–±–∫–∞ OCR: {e}")

    job = re.search(r'[–ó–∑]–∞–¥–∞–Ω–∏[–µ—è][: ]+(\w+)', text)
    km  = re.search(r'(\d+)[\s-]*–∫–º',        text)
    job = job.group(1) if job else '–Ω–µ –Ω–∞–π–¥–µ–Ω'
    km  = km.group(1)  if km  else '–Ω–µ –Ω–∞–π–¥–µ–Ω'

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è Markdown
    job_esc = escape_md(job)
    km_esc  = escape_md(km)
    text_esc = escape_md(text)

    await msg.reply(
        f"üìã *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:*\n"
        f"‚Äì –ó–∞–¥–∞–Ω–∏–µ: `{job_esc}`\n"
        f"‚Äì –ö–∏–ª–æ–º–µ—Ç—Ä–∞–∂: `{km_esc} –∫–º`\n\n"
        f"üóí –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text_esc}",
        parse_mode='Markdown'
    )

@dp.message_handler(commands=['template'])
async def on_template(msg: types.Message):
    key = msg.get_args().lower().strip()
    if not key:
        return await msg.reply("–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á: `/template –æ–ø–ª–∞—Ç–∞`", parse_mode='Markdown')

    recs = sheet.get_all_records()
    hits = [r for r in recs if key in r.get('–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞','').lower()]
    if not hits:
        return await msg.reply("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    for r in hits:
        out = f"üìÑ *{escape_md(r.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è',''))}*\n{escape_md(r.get('–®–∞–±–ª–æ–Ω (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)',''))}"
        link = r.get('–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ/—Ñ–∞–π–ª','').strip()
        if link:
            out += f"\nüîó {escape_md(link)}"
        await msg.reply(out, parse_mode='Markdown')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)


