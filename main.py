import os
import io
import time
import json
import logging
import base64
import re

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from PIL import Image
import requests
from dotenv import load_dotenv

# 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN   = os.getenv('TELEGRAM_TOKEN')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
YANDEX_KEY_FILE  = os.getenv('YANDEX_KEY_FILE', 'yandex_key.json')

assert TELEGRAM_TOKEN,   "TELEGRAM_TOKEN is not set!"
assert YANDEX_FOLDER_ID, "YANDEX_FOLDER_ID is not set!"
assert os.path.exists(YANDEX_KEY_FILE), "YANDEX_KEY_FILE is missing!"

bot = Bot(token=TELEGRAM_TOKEN)
dp  = Dispatcher(bot)

# 2. –Ø–ù–î–ï–ö–° IAM TOKEN (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
_IAM_TOKEN = None
_IAM_EXPIRES = 0

def get_iam_token():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ IAM —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JWT-–ø–æ–¥–ø–∏—Å—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º.
    """
    global _IAM_TOKEN, _IAM_EXPIRES
    if _IAM_TOKEN and _IAM_EXPIRES > time.time() + 300:
        return _IAM_TOKEN
    with open(YANDEX_KEY_FILE, "r") as f:
        key = json.load(f)

    try:
        import jwt  # pyjwt
    except ImportError:
        raise ImportError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É pyjwt: pip install pyjwt[crypto]")

    now = int(time.time())
    payload = {
        "aud": "https://iam.api.cloud.yandex.net/iam/v1/tokens",
        "iss": key["service_account_id"],
        "iat": now,
        "exp": now + 360,
    }
    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ PEM-—Ñ–æ—Ä–º–∞—Ç–µ –≤ –ø–æ–ª–µ "private_key"
    encoded_jwt = jwt.encode(
        payload,
        key["private_key"],
        algorithm="PS256",
        headers={"kid": key["id"]}
    )

    url = "https://iam.api.cloud.yandex.net/iam/v1/tokens"
    resp = requests.post(url, json={"jwt": encoded_jwt})
    if resp.status_code != 200:
        logger.error(f"IAM token error: {resp.status_code}, {resp.text}")
        raise RuntimeError("Failed to obtain Yandex IAM token")
    result = resp.json()
    _IAM_TOKEN = result["iamToken"]
    _IAM_EXPIRES = int(time.time()) + 3600 * 11  # 11 —á–∞—Å–æ–≤
    return _IAM_TOKEN

# 3. –Ø–ù–î–ï–ö–° OCR (VISION)
def yandex_ocr(img_bytes):
    iam_token = get_iam_token()
    url = "https://vision.api.cloud.yandex.net/vision/v1/batchAnalyze"
    headers = {
        "Authorization": f"Bearer {iam_token}",
        "Content-Type": "application/json"
    }
    img_b64 = base64.b64encode(img_bytes).decode('utf-8')
    data = {
        "folderId": YANDEX_FOLDER_ID,
        "analyze_specs": [
            {
                "content": img_b64,
                "features": [{"type": "TEXT_DETECTION", "text_detection_config": {"language_codes": ["ru"]}}]
            }
        ]
    }
    resp = requests.post(url, headers=headers, json=data, timeout=30)
    try:
        result = resp.json()
    except Exception:
        logger.error(f"–û—Ç–≤–µ—Ç –Ω–µ JSON: {resp.text}")
        return ""
    try:
        blocks = result["results"][0]["results"][0]["textDetection"]["pages"][0]["blocks"]
        full_text = []
        for block in blocks:
            for line in block.get("lines", []):
                full_text.append(' '.join([w["text"] for w in line["words"]]))
        return '\n'.join(full_text).strip()
    except Exception as e:
        logger.error(f"OCR error: {e}, raw={result}")
        return ""

# 4. TELEGRAM BOT
@dp.message_handler(commands=["start"])
async def cmd_start(msg: types.Message):
    await msg.reply("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ (—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Å–Ω–∏–º–æ–∫ —ç–∫—Ä–∞–Ω–∞), –∏ —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç, –∑–∞–¥–∞–Ω–∏–µ –∏ –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂ —Å –ø–æ–º–æ—â—å—é Yandex Vision OCR.")

@dp.message_handler(content_types=["photo"])
async def handle_photo(msg: types.Message):
    file_info = await bot.get_file(msg.photo[-1].file_id)
    file = await bot.download_file(file_info.file_path)
    img_bytes = file.read()
    text = yandex_ocr(img_bytes)
    if not text:
        await msg.reply("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Yandex Vision.")
        return

    job = re.search(r'[–ó–∑]–∞–¥–∞–Ω–∏[–µ—è][: ]+([^\n,;]+)', text)
    km  = re.search(r'(\d+)[\s-]*–∫–º', text)
    job = job.group(1).strip() if job else '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
    km  = km.group(1) if km else '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'

    await msg.reply(
        f"üìã *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:*\n"
        f"‚Äì –ó–∞–¥–∞–Ω–∏–µ: `{job}`\n"
        f"‚Äì –ö–∏–ª–æ–º–µ—Ç—Ä–∞–∂: `{km} –∫–º`\n\n"
        f"üóí –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{text}",
        parse_mode='Markdown'
    )

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
